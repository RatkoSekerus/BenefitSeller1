// <auto-generated />
using System;
using BenefitSeller.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BenefitSeller.API.Migrations
{
    [DbContext(typeof(BenefitSellerDbContext))]
    partial class BenefitSellerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8bde4750-205d-4cec-8819-f84bb9531e4c"),
                            Name = "Company with standard user"
                        },
                        new
                        {
                            Id = new Guid("8564cf9b-7654-4511-bab9-fe1838085284"),
                            Name = "Company with premium user"
                        },
                        new
                        {
                            Id = new Guid("a0e8427b-18b4-4417-a87f-e2b096bf0f2a"),
                            Name = "Company with platinum user"
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<double>("Earnings")
                        .HasColumnType("float");

                    b.Property<Guid>("MerchantCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantCategoryId");

                    b.ToTable("Merchants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a022bad-ce1c-487e-bea6-4ba94cce218f"),
                            DiscountPercentage = 12.5,
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("d997a39c-3040-4f48-850d-3d1d598a6986"),
                            Name = "Merchant1"
                        },
                        new
                        {
                            Id = new Guid("63fe072f-7520-416f-a89d-96378e510343"),
                            DiscountPercentage = 7.5,
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("cd7bfdae-c0ad-411b-bec0-7c10263a034e"),
                            Name = "Merchant2"
                        },
                        new
                        {
                            Id = new Guid("75a06bf7-e9a2-40f6-a596-0b5dcd285e97"),
                            DiscountPercentage = 0.0,
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("8e3409a9-ad39-4143-b548-5dee24ddb557"),
                            Name = "Merchant3"
                        },
                        new
                        {
                            Id = new Guid("95e487fb-6539-44f1-a212-8089fae890af"),
                            DiscountPercentage = 0.0,
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("9064c00b-ac90-4933-bda7-d843f52e93d7"),
                            Name = "Merchant4"
                        },
                        new
                        {
                            Id = new Guid("04383055-4594-4d64-9245-1a0041b3d00d"),
                            DiscountPercentage = 0.0,
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("8cd783b3-373a-4443-93b1-678ffd1535b4"),
                            Name = "Merchant5"
                        },
                        new
                        {
                            Id = new Guid("73a5352d-3502-43ec-9261-b8699226a3e4"),
                            DiscountPercentage = 0.0,
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("5003f547-9e78-42be-aa1f-6f64f419ae19"),
                            Name = "Merchant6"
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.MerchantCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MerchantCategoryGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantCategoryGroupId");

                    b.ToTable("MerchantCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d997a39c-3040-4f48-850d-3d1d598a6986"),
                            MerchantCategoryGroupId = new Guid("e1f959a2-35f4-4390-a512-4da2f4b2c75d"),
                            Name = "Restaurants"
                        },
                        new
                        {
                            Id = new Guid("cd7bfdae-c0ad-411b-bec0-7c10263a034e"),
                            MerchantCategoryGroupId = new Guid("e1f959a2-35f4-4390-a512-4da2f4b2c75d"),
                            Name = "Coffee shops"
                        },
                        new
                        {
                            Id = new Guid("8e3409a9-ad39-4143-b548-5dee24ddb557"),
                            MerchantCategoryGroupId = new Guid("98d870de-72e7-4452-868a-58fc6a9a7e99"),
                            Name = "Fitness"
                        },
                        new
                        {
                            Id = new Guid("9064c00b-ac90-4933-bda7-d843f52e93d7"),
                            MerchantCategoryGroupId = new Guid("98d870de-72e7-4452-868a-58fc6a9a7e99"),
                            Name = "Sauna"
                        },
                        new
                        {
                            Id = new Guid("8cd783b3-373a-4443-93b1-678ffd1535b4"),
                            MerchantCategoryGroupId = new Guid("283c4592-2e78-4f8c-80a5-552001ca7f67"),
                            Name = "Courses"
                        },
                        new
                        {
                            Id = new Guid("5003f547-9e78-42be-aa1f-6f64f419ae19"),
                            MerchantCategoryGroupId = new Guid("283c4592-2e78-4f8c-80a5-552001ca7f67"),
                            Name = "Books"
                        },
                        new
                        {
                            Id = new Guid("7b5a96d2-e1e2-43a1-9420-392d95fd4317"),
                            MerchantCategoryGroupId = new Guid("283c4592-2e78-4f8c-80a5-552001ca7f67"),
                            Name = "Conferences"
                        },
                        new
                        {
                            Id = new Guid("170287d4-69c0-4098-9598-3590a9547cb9"),
                            MerchantCategoryGroupId = new Guid("531382eb-3001-4115-875d-c4baabd6a4e9"),
                            Name = "Cinema"
                        },
                        new
                        {
                            Id = new Guid("2278a2e2-a428-4ef5-96dd-e55acad78f92"),
                            MerchantCategoryGroupId = new Guid("531382eb-3001-4115-875d-c4baabd6a4e9"),
                            Name = "Museum"
                        },
                        new
                        {
                            Id = new Guid("b59a99cb-6a93-4599-94e2-4f3db63895ec"),
                            MerchantCategoryGroupId = new Guid("531382eb-3001-4115-875d-c4baabd6a4e9"),
                            Name = "Theater"
                        },
                        new
                        {
                            Id = new Guid("8a91b83c-4c90-47c8-9101-948c3e0e0628"),
                            MerchantCategoryGroupId = new Guid("fb9971fc-2ee5-4b15-a649-c91babedc015"),
                            Name = "Fuel"
                        },
                        new
                        {
                            Id = new Guid("352cb2fa-6082-4ca0-ab98-01b3f0ecb50e"),
                            MerchantCategoryGroupId = new Guid("fb9971fc-2ee5-4b15-a649-c91babedc015"),
                            Name = "Plane tickets"
                        },
                        new
                        {
                            Id = new Guid("7c3c939f-f36d-463a-851a-ddf42a962003"),
                            MerchantCategoryGroupId = new Guid("fb9971fc-2ee5-4b15-a649-c91babedc015"),
                            Name = "Train or bus tickets"
                        },
                        new
                        {
                            Id = new Guid("f19a92e2-0e82-40fa-9429-000de24aade4"),
                            MerchantCategoryGroupId = new Guid("fb9971fc-2ee5-4b15-a649-c91babedc015"),
                            Name = "Taxi"
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.MerchantCategoryGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MerchantCategoryGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1f959a2-35f4-4390-a512-4da2f4b2c75d"),
                            Name = "Food and drinks"
                        },
                        new
                        {
                            Id = new Guid("98d870de-72e7-4452-868a-58fc6a9a7e99"),
                            Name = "Recreation"
                        },
                        new
                        {
                            Id = new Guid("283c4592-2e78-4f8c-80a5-552001ca7f67"),
                            Name = "Education"
                        },
                        new
                        {
                            Id = new Guid("531382eb-3001-4115-875d-c4baabd6a4e9"),
                            Name = "Culture"
                        },
                        new
                        {
                            Id = new Guid("fb9971fc-2ee5-4b15-a649-c91babedc015"),
                            Name = "Traveling"
                        },
                        new
                        {
                            Id = new Guid("54ebefce-997f-4bd2-a038-b72b08139535"),
                            Name = "Shopping"
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5a472ce6-80c1-4526-91c5-d07d37c26b6f"),
                            Name = "Standard",
                            SubscriptionType = 0
                        },
                        new
                        {
                            Id = new Guid("4bf5967c-e20a-4fe4-be05-f199e14a20a2"),
                            Name = "Premium",
                            SubscriptionType = 1
                        },
                        new
                        {
                            Id = new Guid("a76d72da-d9f5-4ef2-98c4-d2e30c667e1e"),
                            Name = "Platinum",
                            SubscriptionType = 2
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 25, 0, 13, 1, 926, DateTimeKind.Local).AddTicks(8377));

                    b.Property<int>("TransactionStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bba28a59-4e2c-4d7d-8e12-0a47eba2a7b6"),
                            Balance = 100.0,
                            CompanyId = new Guid("8bde4750-205d-4cec-8819-f84bb9531e4c"),
                            SubscriptionPlanId = new Guid("5a472ce6-80c1-4526-91c5-d07d37c26b6f"),
                            UserName = "StandardUser"
                        },
                        new
                        {
                            Id = new Guid("e6455511-8025-4683-a089-cc4f60650b05"),
                            Balance = 100.0,
                            CompanyId = new Guid("8564cf9b-7654-4511-bab9-fe1838085284"),
                            SubscriptionPlanId = new Guid("4bf5967c-e20a-4fe4-be05-f199e14a20a2"),
                            UserName = "PremiumUser"
                        },
                        new
                        {
                            Id = new Guid("ae8069c9-1ba5-498e-8359-88c05f364cdb"),
                            Balance = 100.0,
                            CompanyId = new Guid("8564cf9b-7654-4511-bab9-fe1838085284"),
                            SubscriptionPlanId = new Guid("a76d72da-d9f5-4ef2-98c4-d2e30c667e1e"),
                            UserName = "PlatinumUser"
                        });
                });

            modelBuilder.Entity("CompanyMerchantCategoryGroup", b =>
                {
                    b.Property<Guid>("CompaniesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MerchantCategoryGroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompaniesId", "MerchantCategoryGroupsId");

                    b.HasIndex("MerchantCategoryGroupsId");

                    b.ToTable("CompanyBenefit", (string)null);

                    b.HasData(
                        new
                        {
                            CompaniesId = new Guid("8bde4750-205d-4cec-8819-f84bb9531e4c"),
                            MerchantCategoryGroupsId = new Guid("e1f959a2-35f4-4390-a512-4da2f4b2c75d")
                        },
                        new
                        {
                            CompaniesId = new Guid("8bde4750-205d-4cec-8819-f84bb9531e4c"),
                            MerchantCategoryGroupsId = new Guid("98d870de-72e7-4452-868a-58fc6a9a7e99")
                        },
                        new
                        {
                            CompaniesId = new Guid("8564cf9b-7654-4511-bab9-fe1838085284"),
                            MerchantCategoryGroupsId = new Guid("283c4592-2e78-4f8c-80a5-552001ca7f67")
                        },
                        new
                        {
                            CompaniesId = new Guid("8564cf9b-7654-4511-bab9-fe1838085284"),
                            MerchantCategoryGroupsId = new Guid("531382eb-3001-4115-875d-c4baabd6a4e9")
                        },
                        new
                        {
                            CompaniesId = new Guid("a0e8427b-18b4-4417-a87f-e2b096bf0f2a"),
                            MerchantCategoryGroupsId = new Guid("fb9971fc-2ee5-4b15-a649-c91babedc015")
                        },
                        new
                        {
                            CompaniesId = new Guid("a0e8427b-18b4-4417-a87f-e2b096bf0f2a"),
                            MerchantCategoryGroupsId = new Guid("54ebefce-997f-4bd2-a038-b72b08139535")
                        },
                        new
                        {
                            CompaniesId = new Guid("a0e8427b-18b4-4417-a87f-e2b096bf0f2a"),
                            MerchantCategoryGroupsId = new Guid("e1f959a2-35f4-4390-a512-4da2f4b2c75d")
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.Merchant", b =>
                {
                    b.HasOne("BenefitSeller.API.Models.DomainModels.MerchantCategory", "MerchantCategory")
                        .WithMany()
                        .HasForeignKey("MerchantCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MerchantCategory");
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.MerchantCategory", b =>
                {
                    b.HasOne("BenefitSeller.API.Models.DomainModels.MerchantCategoryGroup", "MerchantCategoryGroup")
                        .WithMany()
                        .HasForeignKey("MerchantCategoryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MerchantCategoryGroup");
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.Transaction", b =>
                {
                    b.HasOne("BenefitSeller.API.Models.DomainModels.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BenefitSeller.API.Models.DomainModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.User", b =>
                {
                    b.HasOne("BenefitSeller.API.Models.DomainModels.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BenefitSeller.API.Models.DomainModels.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("CompanyMerchantCategoryGroup", b =>
                {
                    b.HasOne("BenefitSeller.API.Models.DomainModels.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BenefitSeller.API.Models.DomainModels.MerchantCategoryGroup", null)
                        .WithMany()
                        .HasForeignKey("MerchantCategoryGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BenefitSeller.API.Models.DomainModels.Company", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
