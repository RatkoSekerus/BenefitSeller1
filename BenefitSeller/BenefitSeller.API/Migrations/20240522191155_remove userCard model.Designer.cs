// <auto-generated />
using System;
using BenefitSeller.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BenefitSeller.API.Migrations
{
    [DbContext(typeof(BenefitSellerDbContext))]
    [Migration("20240522191155_remove userCard model")]
    partial class removeuserCardmodel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BenefitSeller.API.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce7d8146-02e5-4ffe-bf7c-0013643b30e2"),
                            Name = "StandardCompany"
                        },
                        new
                        {
                            Id = new Guid("2869f08c-a8e0-4d67-a153-76f232a154b5"),
                            Name = "PremiumCompany"
                        },
                        new
                        {
                            Id = new Guid("e0506eb7-4a85-4dc4-8705-92ce99688440"),
                            Name = "PlatinumCompany"
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<double>("Earnings")
                        .HasColumnType("float");

                    b.Property<Guid>("MerchantCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantCategoryId");

                    b.ToTable("Merchants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdfd4b01-7d58-4d37-bda5-dfd68b9c3f24"),
                            DiscountPercentage = 12.5,
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("da072d76-a96d-413d-b12c-33be3deb6952"),
                            Name = "Merchant1"
                        },
                        new
                        {
                            Id = new Guid("03712d7e-beac-43a7-a446-e7d555c0bcda"),
                            DiscountPercentage = 7.5,
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("9eaa49a7-8e46-4ee9-a4cd-5e7799d1baf0"),
                            Name = "Merchant2"
                        },
                        new
                        {
                            Id = new Guid("43134a0b-61e5-4e89-8c32-dcd29aa11f69"),
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("f469a0d6-ae97-4621-984c-f79682bc452e"),
                            Name = "Merchant3"
                        },
                        new
                        {
                            Id = new Guid("9c9880b6-9750-42d6-8ace-483728fb3f4c"),
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("501940da-a849-46f0-a260-409f9511392d"),
                            Name = "Merchant4"
                        },
                        new
                        {
                            Id = new Guid("93d43fb0-19e4-4a53-a538-271dab787d30"),
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("ec3eed74-f9ee-49d5-bd76-d9f129ad8639"),
                            Name = "Merchant5"
                        },
                        new
                        {
                            Id = new Guid("a4a4bb29-af9e-4b1c-99be-2f4b6ef05225"),
                            Earnings = 0.0,
                            MerchantCategoryId = new Guid("58b517eb-5d34-4789-bb42-ec40a366b8e9"),
                            Name = "Merchant6"
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.MerchantCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MerchantCategoryGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MerchantCategoryGroupId");

                    b.ToTable("MerchantCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da072d76-a96d-413d-b12c-33be3deb6952"),
                            MerchantCategoryGroupId = new Guid("b8068328-48b6-47c7-a57a-bc346b7e09ae"),
                            Name = "Restaurants"
                        },
                        new
                        {
                            Id = new Guid("9eaa49a7-8e46-4ee9-a4cd-5e7799d1baf0"),
                            MerchantCategoryGroupId = new Guid("b8068328-48b6-47c7-a57a-bc346b7e09ae"),
                            Name = "Coffee shops"
                        },
                        new
                        {
                            Id = new Guid("f469a0d6-ae97-4621-984c-f79682bc452e"),
                            MerchantCategoryGroupId = new Guid("a4ec0845-6db0-4b6b-a346-6ecc3f2c504e"),
                            Name = "Fitness"
                        },
                        new
                        {
                            Id = new Guid("501940da-a849-46f0-a260-409f9511392d"),
                            MerchantCategoryGroupId = new Guid("a4ec0845-6db0-4b6b-a346-6ecc3f2c504e"),
                            Name = "Sauna"
                        },
                        new
                        {
                            Id = new Guid("ec3eed74-f9ee-49d5-bd76-d9f129ad8639"),
                            MerchantCategoryGroupId = new Guid("f61eb6bf-11b1-4954-b3bd-aa57a88aa83b"),
                            Name = "Courses"
                        },
                        new
                        {
                            Id = new Guid("58b517eb-5d34-4789-bb42-ec40a366b8e9"),
                            MerchantCategoryGroupId = new Guid("f61eb6bf-11b1-4954-b3bd-aa57a88aa83b"),
                            Name = "Books"
                        },
                        new
                        {
                            Id = new Guid("ca66a2c3-7ff4-4ff0-9876-67be7e33f691"),
                            MerchantCategoryGroupId = new Guid("f61eb6bf-11b1-4954-b3bd-aa57a88aa83b"),
                            Name = "Conferences"
                        },
                        new
                        {
                            Id = new Guid("91a1f401-dbf0-435c-9eed-4d0e9debb14c"),
                            MerchantCategoryGroupId = new Guid("169bcab1-0c3c-42e8-a2ce-06d57da9213a"),
                            Name = "Cinema"
                        },
                        new
                        {
                            Id = new Guid("591fb82e-b2b1-42ee-98e7-8e84b9cc90fc"),
                            MerchantCategoryGroupId = new Guid("169bcab1-0c3c-42e8-a2ce-06d57da9213a"),
                            Name = "Museum"
                        },
                        new
                        {
                            Id = new Guid("f6f0671f-4b98-43b1-bba3-b5b650826e0a"),
                            MerchantCategoryGroupId = new Guid("169bcab1-0c3c-42e8-a2ce-06d57da9213a"),
                            Name = "Theater"
                        },
                        new
                        {
                            Id = new Guid("c0f1215c-01d3-423b-88d7-4b469f205648"),
                            MerchantCategoryGroupId = new Guid("b3999514-210f-4942-895c-d760d9423542"),
                            Name = "Fuel"
                        },
                        new
                        {
                            Id = new Guid("fb67e8ac-c34a-490e-84b3-b7368c5218e0"),
                            MerchantCategoryGroupId = new Guid("b3999514-210f-4942-895c-d760d9423542"),
                            Name = "Plane tickets"
                        },
                        new
                        {
                            Id = new Guid("5c30bbb9-9148-4c7e-8ade-d083f24e5c39"),
                            MerchantCategoryGroupId = new Guid("b3999514-210f-4942-895c-d760d9423542"),
                            Name = "Train or bus tickets"
                        },
                        new
                        {
                            Id = new Guid("3d3e67ce-2f96-4f73-8002-4f0b107f6b73"),
                            MerchantCategoryGroupId = new Guid("b3999514-210f-4942-895c-d760d9423542"),
                            Name = "Taxi"
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.MerchantCategoryGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MerchantCategoryGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8068328-48b6-47c7-a57a-bc346b7e09ae"),
                            Name = "Food and drinks"
                        },
                        new
                        {
                            Id = new Guid("a4ec0845-6db0-4b6b-a346-6ecc3f2c504e"),
                            Name = "Recreation"
                        },
                        new
                        {
                            Id = new Guid("f61eb6bf-11b1-4954-b3bd-aa57a88aa83b"),
                            Name = "Education"
                        },
                        new
                        {
                            Id = new Guid("169bcab1-0c3c-42e8-a2ce-06d57da9213a"),
                            Name = "Culture"
                        },
                        new
                        {
                            Id = new Guid("b3999514-210f-4942-895c-d760d9423542"),
                            Name = "Traveling"
                        },
                        new
                        {
                            Id = new Guid("8981a714-dbb0-461c-b434-2e640811bf14"),
                            Name = "Shopping"
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5373457e-862f-48f3-839a-31f539aa02c7"),
                            Name = "Standard",
                            SubscriptionType = 0
                        },
                        new
                        {
                            Id = new Guid("7dee61e2-c5d6-4bc1-935b-34f99ab970f4"),
                            Name = "Premium",
                            SubscriptionType = 1
                        },
                        new
                        {
                            Id = new Guid("6c3209c7-a1d5-4788-8607-50cec3b23c4f"),
                            Name = "Platinum",
                            SubscriptionType = 2
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 5, 22, 21, 11, 55, 32, DateTimeKind.Local).AddTicks(621));

                    b.Property<int>("TransactionStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MerchantId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BenefitSeller.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f88e4ea7-f2bf-45dc-b70d-9abdf871f293"),
                            Balance = 100.0,
                            CompanyId = new Guid("ce7d8146-02e5-4ffe-bf7c-0013643b30e2"),
                            Password = "password",
                            SubscriptionPlanId = new Guid("5373457e-862f-48f3-839a-31f539aa02c7"),
                            UserName = "StandardUser"
                        },
                        new
                        {
                            Id = new Guid("8e44050a-1330-445b-8d06-638334857d3c"),
                            Balance = 100.0,
                            CompanyId = new Guid("2869f08c-a8e0-4d67-a153-76f232a154b5"),
                            Password = "password",
                            SubscriptionPlanId = new Guid("7dee61e2-c5d6-4bc1-935b-34f99ab970f4"),
                            UserName = "PremiumUser"
                        },
                        new
                        {
                            Id = new Guid("846b7416-7756-4f9e-9fa5-269d440cc29e"),
                            Balance = 100.0,
                            CompanyId = new Guid("2869f08c-a8e0-4d67-a153-76f232a154b5"),
                            Password = "password",
                            SubscriptionPlanId = new Guid("6c3209c7-a1d5-4788-8607-50cec3b23c4f"),
                            UserName = "PlatinumUser"
                        });
                });

            modelBuilder.Entity("CompanyMerchantCategoryGroup", b =>
                {
                    b.Property<Guid>("CompaniesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MerchantCategoryGroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompaniesId", "MerchantCategoryGroupsId");

                    b.HasIndex("MerchantCategoryGroupsId");

                    b.ToTable("CompanyBenefit", (string)null);

                    b.HasData(
                        new
                        {
                            CompaniesId = new Guid("ce7d8146-02e5-4ffe-bf7c-0013643b30e2"),
                            MerchantCategoryGroupsId = new Guid("b8068328-48b6-47c7-a57a-bc346b7e09ae")
                        },
                        new
                        {
                            CompaniesId = new Guid("ce7d8146-02e5-4ffe-bf7c-0013643b30e2"),
                            MerchantCategoryGroupsId = new Guid("a4ec0845-6db0-4b6b-a346-6ecc3f2c504e")
                        },
                        new
                        {
                            CompaniesId = new Guid("2869f08c-a8e0-4d67-a153-76f232a154b5"),
                            MerchantCategoryGroupsId = new Guid("f61eb6bf-11b1-4954-b3bd-aa57a88aa83b")
                        },
                        new
                        {
                            CompaniesId = new Guid("2869f08c-a8e0-4d67-a153-76f232a154b5"),
                            MerchantCategoryGroupsId = new Guid("169bcab1-0c3c-42e8-a2ce-06d57da9213a")
                        },
                        new
                        {
                            CompaniesId = new Guid("e0506eb7-4a85-4dc4-8705-92ce99688440"),
                            MerchantCategoryGroupsId = new Guid("b3999514-210f-4942-895c-d760d9423542")
                        },
                        new
                        {
                            CompaniesId = new Guid("e0506eb7-4a85-4dc4-8705-92ce99688440"),
                            MerchantCategoryGroupsId = new Guid("8981a714-dbb0-461c-b434-2e640811bf14")
                        },
                        new
                        {
                            CompaniesId = new Guid("e0506eb7-4a85-4dc4-8705-92ce99688440"),
                            MerchantCategoryGroupsId = new Guid("b8068328-48b6-47c7-a57a-bc346b7e09ae")
                        });
                });

            modelBuilder.Entity("BenefitSeller.API.Models.Merchant", b =>
                {
                    b.HasOne("BenefitSeller.API.Models.MerchantCategory", "MerchantCategory")
                        .WithMany()
                        .HasForeignKey("MerchantCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MerchantCategory");
                });

            modelBuilder.Entity("BenefitSeller.API.Models.MerchantCategory", b =>
                {
                    b.HasOne("BenefitSeller.API.Models.MerchantCategoryGroup", "MerchantCategoryGroup")
                        .WithMany()
                        .HasForeignKey("MerchantCategoryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MerchantCategoryGroup");
                });

            modelBuilder.Entity("BenefitSeller.API.Models.Transaction", b =>
                {
                    b.HasOne("BenefitSeller.API.Models.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BenefitSeller.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BenefitSeller.API.Models.User", b =>
                {
                    b.HasOne("BenefitSeller.API.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BenefitSeller.API.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("CompanyMerchantCategoryGroup", b =>
                {
                    b.HasOne("BenefitSeller.API.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BenefitSeller.API.Models.MerchantCategoryGroup", null)
                        .WithMany()
                        .HasForeignKey("MerchantCategoryGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BenefitSeller.API.Models.Company", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
